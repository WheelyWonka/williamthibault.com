import{S as e,P as o,W as n,C as t,B as a,M as i,a as s,b as r,c as l,A as c,G as m,d,V as f,e as u,R as v,f as h}from"./three-BNYA2v9J.js";!function(){const e=document.createElement("link").relList;if(!(e&&e.supports&&e.supports("modulepreload"))){for(const e of document.querySelectorAll('link[rel="modulepreload"]'))o(e);new MutationObserver((e=>{for(const n of e)if("childList"===n.type)for(const e of n.addedNodes)"LINK"===e.tagName&&"modulepreload"===e.rel&&o(e)})).observe(document,{childList:!0,subtree:!0})}function o(e){if(e.ep)return;e.ep=!0;const o=function(e){const o={};return e.integrity&&(o.integrity=e.integrity),e.referrerPolicy&&(o.referrerPolicy=e.referrerPolicy),"use-credentials"===e.crossOrigin?o.credentials="include":"anonymous"===e.crossOrigin?o.credentials="omit":o.credentials="same-origin",o}(e);fetch(e.href,o)}}();const p=window.matchMedia("(hover: none) and (pointer: coarse)").matches,w=new e,y=new o(75,window.innerWidth/window.innerHeight,.1,2e3),M=new n({antialias:!0});M.setSize(window.innerWidth,window.innerHeight),document.body.appendChild(M.domElement),w.background=new t(0);const x=new r(new a(100,100,100),new i({side:s,color:0,metalness:.5,roughness:1,envMapIntensity:0}));w.add(x);const g={x:.2*Math.random()+.1,y:.15*Math.random()+.08,z:.1*Math.random()+.05},b={x:.3*Math.random()+.2,y:.3*Math.random()+.2,z:.2*Math.random()+.1},P={x:Math.random()*Math.PI*2,y:Math.random()*Math.PI*2,z:Math.random()*Math.PI*2},D=new l(16777215,3e3);D.distance=150,D.decay=1.5;const z={basePos:{x:40*(Math.random()-.5),y:40*(Math.random()-.5),z:40*(Math.random()-.5)},movement:{freqs:Array(5).fill(0).map((()=>.2*Math.random()+.05)),amps:Array(5).fill(0).map((()=>8*Math.random()+5)),phases:Array(5).fill(0).map((()=>Math.random()*Math.PI*2))}};D.position.set(z.basePos.x,z.basePos.y,z.basePos.z),w.add(D);const S=new l(16777215,3e3);S.distance=150,S.decay=1.5;const E={basePos:{x:40*(Math.random()-.5),y:40*(Math.random()-.5),z:40*(Math.random()-.5)},movement:{freqs:Array(5).fill(0).map((()=>.2*Math.random()+.05)),amps:Array(5).fill(0).map((()=>8*Math.random()+5)),phases:Array(5).fill(0).map((()=>Math.random()*Math.PI*2))}};S.position.set(E.basePos.x,E.basePos.y,E.basePos.z),w.add(S);const C=new c(16777215,.2);w.add(C);const L=1.5,A=new m,I=[];let N=new Set,W=0,q=3,O=3;new f(0,0);for(let ee=0;ee<8;ee++)for(let e=0;e<8;e++)for(let o=0;o<8;o++){const n=new a(L,L,L),t=new d({color:4473924,shininess:0,specular:0});t.defines={USE_UV:""},t.onBeforeCompile=e=>{Object.assign(e.uniforms,{time:{value:0},variation:{value:Math.floor(24*Math.random())},cubeSize:{value:12},mousePos:{value:new f(0,0)}}),t.userData.shader=e,e.vertexShader=e.vertexShader.replace("#include <common>","#include <common>\nvarying vec3 vWorldPosition;"),e.vertexShader=e.vertexShader.replace("#include <begin_vertex>","#include <begin_vertex>\n                    vec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n                    vWorldPosition = worldPosition.xyz;");e.fragmentShader=e.fragmentShader.replace("#include <common>","#include <common>\n\n                    uniform float time;\n                    uniform float variation;\n                    uniform float cubeSize;\n                    uniform vec2 mousePos;\n                    varying vec3 vWorldPosition;\n\n                    // Arrays for colors and patterns\n                    vec3 colors[24] = vec3[24](\n                        vec3(0.067), vec3(0.045), vec3(0.058), vec3(0.042),\n                        vec3(0.049), vec3(0.054), vec3(0.061), vec3(0.043),\n                        vec3(0.056), vec3(0.040), vec3(0.047), vec3(0.055),\n                        vec3(0.063), vec3(0.039), vec3(0.048), vec3(0.052),\n                        vec3(0.046), vec3(0.041), vec3(0.050), vec3(0.044),\n                        vec3(0.057), vec3(0.038), vec3(0.052), vec3(0.053)\n                    );\n\n                    float imperfectionStrength[24] = float[24](\n                        0.15, 0.18, 0.14, 0.16, 0.13, 0.17,\n                        0.16, 0.14, 0.17, 0.15, 0.18, 0.13,\n                        0.16, 0.15, 0.17, 0.14, 0.16, 0.18,\n                        0.15, 0.17, 0.14, 0.16, 0.15, 0.17\n                    );\n\n                    float random(vec2 st) {\n                        return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);\n                    }\n\n                    float noise(vec2 st) {\n                        vec2 i = floor(st);\n                        vec2 f = fract(st);\n                        float a = random(i);\n                        float b = random(i + vec2(1.0, 0.0));\n                        float c = random(i + vec2(0.0, 1.0));\n                        float d = random(i + vec2(1.0, 1.0));\n                        vec2 u = f * f * (3.0 - 2.0 * f);\n                        return mix(a, b, u.x) + (c - a)* u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n                    }\n\n                    vec2 flowNoise(vec2 st, float t) {\n                        float angle1 = noise(st + t * 0.1) * 6.28318;\n                        float angle2 = noise(st * 1.5 - t * 0.15) * 6.28318;\n                        vec2 flow1 = vec2(cos(angle1), sin(angle1));\n                        vec2 flow2 = vec2(cos(angle2), sin(angle2));\n                        vec2 mouseFlow = (mousePos - st) * 0.02;\n                        return flow1 * 0.3 + flow2 * 0.2 + mouseFlow;\n                    }\n\n                    float fbm(vec2 st) {\n                        float value = 0.0;\n                        float amplitude = 0.5;\n                        vec2 flow = flowNoise(st * 0.5, time);\n                        for(int i = 0; i < 5; i++) {\n                            vec2 flowedSt = st + flow * (float(i) * 0.1);\n                            value += amplitude * noise(flowedSt);\n                            st *= 2.0;\n                            amplitude *= 0.5;\n                        }\n                        return value;\n                    }\n\n                    vec3 getVariationColor(float v, vec2 st, float n, float imp) {\n                        vec2 flow = flowNoise(st, time);\n                        st += flow * 0.2;\n                        \n                        float pattern = n * 0.15 + fbm(st*2.0 + sin(time * 0.2) * 0.1) * 0.08;\n                        vec3 baseColor = colors[int(v)];\n                        vec3 color = baseColor + vec3(pattern - 0.075);\n                        color += vec3(imp * imperfectionStrength[int(v)]);\n                        return color;\n                    }\n                "),e.fragmentShader=e.fragmentShader.replace("#include <color_fragment>","\n                    #include <color_fragment>\n                    vec2 globalSt = vWorldPosition.xy / cubeSize * 8.0;\n                    vec2 flow = flowNoise(globalSt, time) * 0.3;\n                    globalSt += flow;\n                    float n = fbm(globalSt);\n                    float imp = fbm(globalSt * 4.0 + flow);\n                    vec3 concreteColor = getVariationColor(variation, globalSt, n, imp);\n                    float edgeEffect = pow(1.0 - abs(dot(normalize(vNormal), vec3(0.0, 0.0, 1.0))), 0.5) * 0.3;\n                    concreteColor = mix(concreteColor, concreteColor * 0.8, edgeEffect);\n                    diffuseColor.rgb *= concreteColor;\n                    ")};const i=new r(n,t);i.position.set((ee-4+.5)*L,(e-4+.5)*L,(o-4+.5)*L),i.userData.originalPosition=i.position.clone(),i.userData.randomOffset=new u(2*Math.random()-1,2*Math.random()-1,2*Math.random()-1),i.userData.isAlive=!1,i.userData.aliveTime=0,i.userData.aliveDuration=0,i.userData.aliveDirection=new u,0===ee||7===ee?(i.userData.isFaceCube=!0,i.userData.faceNormal=new u(0===ee?-1:1,0,0)):0===e||7===e?(i.userData.isFaceCube=!0,i.userData.faceNormal=new u(0,0===e?-1:1,0)):0===o||7===o?(i.userData.isFaceCube=!0,i.userData.faceNormal=new u(0,0,0===o?-1:1)):i.userData.isFaceCube=!1,I.push(i),A.add(i)}w.add(A),y.position.z=20;const F=.07;let T=0,B=0,H=0,j=0;let _=-15;A.position.z=-15,window.addEventListener("wheel",(function(e){const o=Math.sign(e.deltaY),n=-_,t=n+1*o*(n<1?.1:.3);_=-Math.max(.001,Math.min(30,t))}));const k=new f;let V=!1,Y=new u,$=new u,X=new u,U=!1;function G(e){const o=e.touches?e.touches[0].clientX:e.clientX,n=e.touches?e.touches[0].clientY:e.clientY;k.x=o/window.innerWidth*2-1,k.y=-n/window.innerHeight*2+1,B=k.x*F,T=-k.y*F,I.forEach((e=>{e.material.userData.shader&&e.material.userData.shader.uniforms.mousePos.value.set(k.x,k.y)})),R.setFromCamera(k,y);const t=R.intersectObjects(I),a=V;if(V=t.length>0,V&&t[0]&&(a||(X.copy(t[0].point),Y.copy(t[0].point)),$.copy(t[0].point),A.worldToLocal($),U=!0),!p){const e=15*k.x,o=15*k.y;document.getElementById("contact-info").style.transform=`translate(${e}px, ${-o}px)`}}function K(){k.x=0,k.y=0,T=0,B=0,V=!1,p||(document.getElementById("contact-info").style.transform="translate(0px, 0px)")}window.addEventListener("mousemove",G),window.addEventListener("touchmove",(e=>{e.preventDefault(),G(e)}),{passive:!1}),window.addEventListener("touchstart",(e=>{e.preventDefault(),G(e)}),{passive:!1}),window.addEventListener("mouseleave",K),window.addEventListener("touchend",K),window.removeEventListener("mousemove",J);const R=new v;function J(e){k.x=e.clientX/window.innerWidth*2-1,k.y=-e.clientY/window.innerHeight*2+1,B=k.x*F,T=-k.y*F,I.forEach((e=>{e.material.userData.shader&&e.material.userData.shader.uniforms.mousePos.value.set(k.x,k.y)})),R.setFromCamera(k,y);const o=R.intersectObjects(I),n=V;V=o.length>0,V&&o[0]&&(n||(X.copy(o[0].point),Y.copy(o[0].point)),$.copy(o[0].point),A.worldToLocal($),U=!0);const t=15*k.x,a=15*k.y;document.getElementById("contact-info").style.transform=`translate(${t}px, ${-a}px)`}window.addEventListener("mousemove",J),window.addEventListener("resize",(()=>{y.aspect=window.innerWidth/window.innerHeight,y.updateProjectionMatrix(),M.setSize(window.innerWidth,window.innerHeight)}));let Q=0;!function e(){requestAnimationFrame(e),Q+=.01,A.position.z=h.lerp(A.position.z,_,.08),H=h.lerp(H,T,.05),j=h.lerp(j,B,.05),y.rotation.x=H,y.rotation.y=j,D.position.x=z.basePos.x,D.position.y=z.basePos.y,D.position.z=z.basePos.z;for(let i=0;i<5;i++)D.position.x+=Math.sin(Q*z.movement.freqs[i]+z.movement.phases[i])*z.movement.amps[i],D.position.y+=Math.cos(Q*z.movement.freqs[i]+z.movement.phases[i])*z.movement.amps[i],D.position.z+=Math.sin(Q*z.movement.freqs[i]+.7*z.movement.phases[i])*z.movement.amps[i]*.5;D.position.x=Math.max(-45,Math.min(45,D.position.x)),D.position.y=Math.max(-45,Math.min(45,D.position.y)),D.position.z=Math.max(-45,Math.min(45,D.position.z)),S.position.x=E.basePos.x,S.position.y=E.basePos.y,S.position.z=E.basePos.z;for(let i=0;i<5;i++)S.position.x+=Math.sin(Q*E.movement.freqs[i]+E.movement.phases[i])*E.movement.amps[i],S.position.y+=Math.cos(Q*E.movement.freqs[i]+E.movement.phases[i])*E.movement.amps[i],S.position.z+=Math.cos(Q*E.movement.freqs[i]+.7*E.movement.phases[i])*E.movement.amps[i]*.5;S.position.x=Math.max(-45,Math.min(45,S.position.x)),S.position.y=Math.max(-45,Math.min(45,S.position.y)),S.position.z=Math.max(-45,Math.min(45,S.position.z)),U&&Y.lerp($,.1),V||(A.rotation.x+=.001,A.rotation.y+=.002),W+=.016,W>=q&&(W=0,q=O,O=3);const o=W/q,n=Math.pow(Math.max(0,1-Math.abs(o-.2)/.013),4),t=.8*Math.pow(Math.max(0,1-Math.abs(o-.27)/.013),4),a=Math.max(n,t);I.forEach((e=>{if(V){const o=e.position.clone(),n=o.distanceTo(Y),t=7.2,a=Math.max(0,1-n/t),i=12*Math.pow(a,1.5);if(n<t){const n=o.sub(Y).normalize(),t=new u(e.userData.originalPosition.x+n.x*i,e.userData.originalPosition.y+n.y*i,e.userData.originalPosition.z+n.z*i);e.position.lerp(t,.15),e.userData.isAlive=!1,N.delete(e)}else e.position.lerp(e.userData.originalPosition,.15)}else{if(e.userData.isAlive){e.userData.aliveTime+=.016,e.userData.originalPosition.clone().normalize();const o=e.userData.originalPosition.length()/6,n=.7+.6*e.userData.randomOffset.x,t=.4*a*o*n,i=new u(e.userData.originalPosition.x*(1+t),e.userData.originalPosition.y*(1+t),e.userData.originalPosition.z*(1+t)),s=a>.1?.5+.2*e.userData.randomOffset.y:.15+.05*e.userData.randomOffset.z;e.position.lerp(i,s),e.userData.aliveTime>=q&&(e.userData.aliveTime=0)}else e.position.lerp(e.userData.originalPosition,.15);!e.userData.isAlive&&N.size<512&&(e.userData.isAlive=!0,e.userData.aliveTime=0,N.add(e))}})),I.forEach((e=>{e.material.userData.shader&&(e.material.userData.shader.uniforms.time.value=Q)})),x.rotation.x=Math.sin(Q*g.x+P.x)*b.x,x.rotation.y=Math.sin(Q*g.y+P.y)*b.y,x.rotation.z=Math.sin(Q*g.z+P.z)*b.z,M.render(w,y)}();const Z=document.getElementById("contact-info");["mousemove","click","touch","touchstart","touchmove","touchend"].forEach((e=>{Z.addEventListener(e,(e=>{e.stopPropagation()}),{passive:!0})}));
